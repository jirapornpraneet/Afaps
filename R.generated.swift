//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Afaps-enterprise-Info.plist`.
    static let afapsEnterpriseInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Afaps-enterprise-Info", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Afaps-enterprise-Info", withExtension: "plist")`
    static func afapsEnterpriseInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.afapsEnterpriseInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `afaps-logo`.
    static let afapsLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "afaps-logo")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_exit_to_app_white`.
    static let ic_exit_to_app_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_exit_to_app_white")
    /// Image `ic_remove_red_eye`.
    static let ic_remove_red_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_remove_red_eye")
    /// Image `ic_vpn_key`.
    static let ic_vpn_key = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vpn_key")
    
    /// `UIImage(named: "afaps-logo", bundle: ..., traitCollection: ...)`
    static func afapsLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.afapsLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_exit_to_app_white", bundle: ..., traitCollection: ...)`
    static func ic_exit_to_app_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_exit_to_app_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_remove_red_eye", bundle: ..., traitCollection: ...)`
    static func ic_remove_red_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_remove_red_eye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_vpn_key", bundle: ..., traitCollection: ...)`
    static func ic_vpn_key(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vpn_key, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `faceCells`.
    static let faceCells: Rswift.ReuseIdentifier<MainTableViewCell> = Rswift.ReuseIdentifier(identifier: "faceCells")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `toMainView`.
      static let toMainView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "toMainView")
      
      /// Optionally returns a typed version of segue `toMainView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.toMainView, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Base translation: Cancel
      /// 
      /// Locales: th, Base
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Confirm
      /// 
      /// Locales: th, Base
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Created At : %@
      /// 
      /// Locales: th, Base
      static let createdAt = Rswift.StringResource(key: "Created At : %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Do you want to log out?
      /// 
      /// Locales: th, Base
      static let doYouWantToLogOut = Rswift.StringResource(key: "Do you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Location : %@
      /// 
      /// Locales: th, Base
      static let location = Rswift.StringResource(key: "Location : %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Result not found
      /// 
      /// Locales: th, Base
      static let resultNotFound = Rswift.StringResource(key: "Result not found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      /// Base translation: Similarity : %@
      /// 
      /// Locales: th, Base
      static let similarity = Rswift.StringResource(key: "Similarity : %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["th", "Base"], comment: nil)
      
      /// Base translation: Cancel
      /// 
      /// Locales: th, Base
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, value: "Cancel", comment: "")
      }
      
      /// Base translation: Confirm
      /// 
      /// Locales: th, Base
      static func confirm(_: Void = ()) -> String {
        return NSLocalizedString("Confirm", bundle: R.hostingBundle, value: "Confirm", comment: "")
      }
      
      /// Base translation: Created At : %@
      /// 
      /// Locales: th, Base
      static func createdAt(_ value1: String) -> String {
        return String(format: NSLocalizedString("Created At : %@", bundle: R.hostingBundle, value: "Created At : %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Do you want to log out?
      /// 
      /// Locales: th, Base
      static func doYouWantToLogOut(_: Void = ()) -> String {
        return NSLocalizedString("Do you want to log out?", bundle: R.hostingBundle, value: "Do you want to log out?", comment: "")
      }
      
      /// Base translation: Location : %@
      /// 
      /// Locales: th, Base
      static func location(_ value1: String) -> String {
        return String(format: NSLocalizedString("Location : %@", bundle: R.hostingBundle, value: "Location : %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Result not found
      /// 
      /// Locales: th, Base
      static func resultNotFound(_: Void = ()) -> String {
        return NSLocalizedString("Result not found", bundle: R.hostingBundle, value: "Result not found", comment: "")
      }
      
      /// Base translation: Similarity : %@
      /// 
      /// Locales: th, Base
      static func similarity(_ value1: String) -> String {
        return String(format: NSLocalizedString("Similarity : %@", bundle: R.hostingBundle, value: "Similarity : %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 8 localization keys.
    struct main {
      /// th translation: Afaps
      /// 
      /// Locales: th
      static let llqPeI0fTitle = Rswift.StringResource(key: "llq-Pe-I0f.title", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: personname
      /// 
      /// Locales: th
      static let bUxIAExvText = Rswift.StringResource(key: "BUx-IA-exv.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: personname
      /// 
      /// Locales: th
      static let buBcOguText = Rswift.StringResource(key: "5BU-bc-Ogu.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: personname
      /// 
      /// Locales: th
      static let fxRTUPKUText = Rswift.StringResource(key: "fxR-tU-pKU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: personname
      /// 
      /// Locales: th
      static let ohoQDFayText = Rswift.StringResource(key: "oho-qD-fay.text", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static let pjYX0eMPlaceholder = Rswift.StringResource(key: "7pj-yX-0eM.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: อีเมล
      /// 
      /// Locales: th
      static let g8mUuMPlaceholder = Rswift.StringResource(key: "77G-8m-UuM.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static let ncoRd9brNormalTitle = Rswift.StringResource(key: "Nco-rd-9br.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["th"], comment: nil)
      
      /// th translation: Afaps
      /// 
      /// Locales: th
      static func llqPeI0fTitle(_: Void = ()) -> String {
        return NSLocalizedString("llq-Pe-I0f.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: personname
      /// 
      /// Locales: th
      static func bUxIAExvText(_: Void = ()) -> String {
        return NSLocalizedString("BUx-IA-exv.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: personname
      /// 
      /// Locales: th
      static func buBcOguText(_: Void = ()) -> String {
        return NSLocalizedString("5BU-bc-Ogu.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: personname
      /// 
      /// Locales: th
      static func fxRTUPKUText(_: Void = ()) -> String {
        return NSLocalizedString("fxR-tU-pKU.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: personname
      /// 
      /// Locales: th
      static func ohoQDFayText(_: Void = ()) -> String {
        return NSLocalizedString("oho-qD-fay.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: รหัสผ่าน
      /// 
      /// Locales: th
      static func pjYX0eMPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("7pj-yX-0eM.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: อีเมล
      /// 
      /// Locales: th
      static func g8mUuMPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("77G-8m-UuM.placeholder", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// th translation: เข้าสู่ระบบ
      /// 
      /// Locales: th
      static func ncoRd9brNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Nco-rd-9br.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "Login")
      let mainNavigation = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MainNavigation")
      let name = "Main"
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      func mainNavigation(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigation)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_email") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_exit_to_app_white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_exit_to_app_white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_remove_red_eye") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_remove_red_eye' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "afaps-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'afaps-logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_vpn_key") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_vpn_key' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().mainNavigation() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigation' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
